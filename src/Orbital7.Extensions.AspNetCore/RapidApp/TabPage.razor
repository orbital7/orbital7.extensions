@if (this.Parent != null)
{
    @if (this.Parent.RenderMode == RATabsViewRenderMode.Dynamic)
    { 
        if (this.Parent.ActiveTab == this)
        {
            <div class="ra-flex-container">
                @ChildContent
            </div>
        }
    }
    else if (this.Parent.RenderMode == RATabsViewRenderMode.Static)
    {
        <div class="ra-flex-container" style="@GetVisibilityStyle(this.Parent);">
            @ChildContent
        </div>
    }
}

@code {

    [CascadingParameter]
    private RATabsView? Parent { get; set; }

    [Parameter]
    public string? ID { get; set; }

    [Parameter]
    public string? Text { get; set; }

    [Parameter]
    public bool IsVisible { get; set; } = true;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        if (Parent == null)
        {
            throw new ArgumentNullException(nameof(Parent), "TabPage must exist within an RATabsView");
        }

        this.Parent.AddPage(this);

        base.OnInitialized();
    }

    private string GetVisibilityStyle(
        RATabsView parent)
    {
        if (parent.ActiveTab == this)
        {
            return "";
        }
        else
        {
            return "display: none;";
        }
    }
}
