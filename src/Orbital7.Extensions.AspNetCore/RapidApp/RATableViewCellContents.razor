@typeparam TEntity
@inject TimeConverter TimeConverter

@if (this.Column != null &&
     this.Segment != null &&
     this.Item != null)
{
    this.Column.EnsureDisplayValueOptions();

    if (this.Column.IsIndexColumn())
    {
        @this.Index
    }
    else if (this.Column.GetCellContent != null)
    {
        @this.Column.GetCellContent(this.Item)
    }
    else if (this.Column.GetCellValue != null)
    {
        var value = this.Column.GetCellValue(
            this.Column,
            this.Segment,
            this.Item);

        if (value != null && IsDateTime(value.GetType()))
        {
            <LocalDateTime Value="@((DateTime?)value)"
                           DateTimeFormat="@this.Column.DisplayValueOptions.DateTimeFormat"
                           TimeZoneId="@this.Column.DisplayValueOptions.TimeZoneId"
                           DefaultValue="@this.Column.DefaultValue" />
        }
        else
        {
            @this.Column.GetDisplayValue(value, this.TimeConverter)
        }
    }
    else
    {
        if (IsDateTime(this.Column.GetForType()))
        {
            <LocalDateTime Value="@((DateTime?)this.Column.GetForValue(this.Item))"
                           DateTimeFormat="@this.Column.DisplayValueOptions.DateTimeFormat"
                           TimeZoneId="@this.Column.DisplayValueOptions.TimeZoneId"
                           DefaultValue="@this.Column.DefaultValue" />
        }
        else
        {
            @this.Column.GetItemDisplayValue(this.Item, this.TimeConverter)
        }
    }
}

@code {

    [Parameter]
    public RATableTemplate<TEntity>.Column<TEntity>? Column { get; set; }

    [Parameter]
    public RATableViewSegment<TEntity>? Segment { get; set; }

    [Parameter]
    public TEntity? Item { get; set; }

    [Parameter]
    public int Index { get; set; }

    private bool IsDateTime(
        Type? type)
    {
        return type != null && 
            (type == typeof(DateTime) || 
             type == typeof(DateTime?));
    }
}
