@typeparam TInput where TInput : class

@if (this.Input == null)
{
    <div>
        @if (_inputCreationErrorMessage == null)
        {
            <LoadingView />
        }
        else
        {
            <div class="alert alert-danger" role="alert">
                @_inputCreationErrorMessage
            </div>
        }
    </div>

    <div class="ra-dialog-controls">

        <button type="button"
                class="btn btn-sm @this.CancelButtonClass ra-dialog-control-btn"
                @onclick="@HandleCancelAsync">
            @this.CancelButtonText
        </button>

    </div>
}
else
{
    <RAForm @ref="_form" 
            Input="@this.Input"
            ValidateInput="@this.ValidateInput"
            InvalidInputMessage="@this.InvalidInputMessage"
            OnValidateInputBeforeSubmit="@this.OnValidateInputBeforeSubmit"
            OnSubmit="@this.OnSubmit"
            OnAfterSubmit="@HandleAfterSubmitAsync">

        <div class="ra-dialog-content ra-scrollable-y">
            @this.ChildContent
        </div>

        <SectionContent SectionName="@(RAForm<TInput>.CONTROLS_SECTION_NAME)">

            <div class="ra-dialog-controls">

                <button type="submit"
                        class="btn btn-sm @this.ActionButtonClass ra-dialog-control-btn"
                        disabled="@(_form.IsProcessing || !this.IsActionButtonEnabled)">

                    @if (_form.IsProcessing)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    else
                    {
                        @this.ActionButtonText
                    }

                </button>

                @if (this.ShowCancelButton)
                {
                    <button type="button"
                            class="btn btn-sm @this.CancelButtonClass ra-dialog-control-btn"
                            @onclick="@HandleCancelAsync"
                            disabled="@_form.IsProcessing">
                        @this.CancelButtonText
                    </button>
                }

            </div>

        </SectionContent>

    </RAForm>
}

@code {

    private string? _inputCreationErrorMessage;

    private RAForm<TInput> _form = default!;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string ActionButtonClass { get; set; } = "btn-primary";

    [Parameter]
    public string ActionButtonText { get; set; } = "Save";

    [Parameter]
    public string CancelButtonClass { get; set; } = "btn-secondary";

    [Parameter]
    public string CancelButtonText { get; set; } = "Cancel";

    [Parameter]
    public bool IsActionButtonEnabled { get; set; } = true;

    [Parameter]
    public bool ShowCancelButton { get; set; } = true;

    [Parameter]
    public TInput? Input { get; set; }

    [Parameter]
    public bool ValidateInput { get; set; } = true;

    [Parameter]
    public string InvalidInputMessage { get; set; } = RAForm<TInput>.DEFAULT_INVALID_INPUT_MSG;

    [Parameter]
    public Func<Task<TInput>>? CreateInput { get; set; }

    [Parameter]
    public Func<TInput, RAFormValidationState, Task>? OnValidateInputBeforeSubmit { get; set; }

    [Parameter]
    public Func<Task<object>>? OnSubmit { get; set; }

    [CascadingParameter] 
    protected BlazoredModalInstance ModalInstance { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        if (this.Input == null && this.CreateInput != null)
        {
            try
            {
                this.Input = await this.CreateInput();
            }
            catch (Exception ex)
            {
                _inputCreationErrorMessage = ex.Message;
            }
        }
    }

    private async Task HandleAfterSubmitAsync(
        RAFormSubmissionResult result)
    {
        // Close the dialog if form was successfully submitted.
        if (result.Succeeded)
        {
            var modalResult = result.ReturnedResult != null ?
                ModalResult.Ok(result.ReturnedResult) :
                ModalResult.Ok();
            await this.ModalInstance.CloseAsync(modalResult);
        }
    }    

    private async Task HandleCancelAsync()
    {
        await this.ModalInstance.CancelAsync();
    }
}
