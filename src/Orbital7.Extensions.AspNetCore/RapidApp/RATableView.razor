@typeparam TItem
@inject TimeConverter TimeConverter

@if (this.Template != null)
{
    var segments = this.GetSegments();

    @if (!this.NoItemsMessage.HasText() ||
         this.HasItems(segments))
    {
        <div class="@GetTableWrapperClass() @this.Class" style="@this.Style">
            <table class="@GetTableClass(this.Template)" style="@GetTableStyle()">
                <thead>
                    <tr>
                        @foreach (var column in this.Template.Columns)
                        {
                            <th class="@GetHeaderCellClass(column)"
                                style="@GetHeaderCellStyle(column)"
                                @onclick="column.CanBeSorted(this.Template.IsSortableOverride) ? () => HandleOnSortBy(column) : default!">

                                @if (column.GetHeaderCellContent != null)
                                {
                                    @column.GetHeaderCellContent(segments)
                                }
                                else
                                {
                                    @column.HeaderText
                                }

                                @if (column.CanBeSorted(this.Template.IsSortableOverride))
                                {
                                    @if (column.SortBy)
                                    {
                                        if (column.SortDescending)
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" fill="currentColor" class="" viewBox="0 0 16 16">
                                                <path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z" />
                                            </svg>
                                        }
                                        else
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" fill="currentColor" class="" viewBox="0 0 16 16">
                                                <path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
                                            </svg>
                                        }
                                    }
                                    else
                                    {
                                        <span class="ra-tableview-sorting-placeholder"></span>
                                    }
                                }

                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (int s = 0; s < segments.Count; s++)
                    {
                        var segment = segments[s];

                        var sortedItems = this.Template.GetSortedItems(segment);
                        if (sortedItems != null && sortedItems.Count > 0)
                        {
                            if (segments.Count > 1)
                            {
                                if (this.SegmentStyle == RATableViewSegmentStyle.Header)
                                {
                                    <tr class="ra-tableview-segment-row-header">
                                        <td colspan="@this.Template.Columns.Count">
                                            @segment.HeaderText
                                        </td>
                                    </tr>
                                }
                                else if (this.SegmentStyle == RATableViewSegmentStyle.Divider && s > 0)
                                {
                                    <tr class="ra-tableview-segment-row-divider">
                                        <td colspan="@this.Template.Columns.Count"></td>
                                    </tr>
                                }
                            }

                            for (int j = 0; j < this.DebugContentCount; j++) { 

                                // Don't use ForEach here, as rapid updates may cause overlapping rendering, 
                                // which errors out mid-enumeration.
                                for (int i = 0; i < sortedItems.Count; i++)
                                {
                                    var itemPair = sortedItems.ElementAt(i);
                                    var index = itemPair.Key;
                                    var item = itemPair.Value;

                                    <tr class="@GetRowClass(item)" 
                                        @onclick="this.Template.OnRowSelected != null && !IsRowSelected(item) ? () => HandleOnRowSelected(segment, item) : default!">

                                        @foreach (var column in this.Template.Columns)
                                        {
                                            <td class="@GetCellClass(column, segment, item)"
                                                style="@GetCellStyle(column, segment, item)">

                                                @if (column.OnCellUrlClicked != null)
                                                {
                                                    <a href=""
                                                       @onclick="() => column.OnCellUrlClicked(column, segment, item)"
                                                       @onclick:preventDefault="true">
                                                        <RATableViewCellContents Column="column" 
                                                                                 Segment="segment"
                                                                                 Index="index"
                                                                                 Item="item" />
                                                    </a>
                                                }
                                                else if (column.GetCellUrl != null)
                                                {
                                                    <a href="@column.GetCellUrl(column, segment, item)">
                                                        <RATableViewCellContents Column="column"
                                                                                 Segment="segment"
                                                                                 Index="index"
                                                                                 Item="item" />
                                                    </a>
                                                }
                                                else
                                                {
                                                    <RATableViewCellContents Column="column"
                                                                             Segment="segment"
                                                                             Index="index"
                                                                             Item="item" />
                                                }
                                            </td>
                                        }

                                    </tr>
                                }

                            }
                        }
                    }
                </tbody>

                @if (this.Template.HasFooter)
                {
                    <tfoot>
                        <tr>
                            @foreach (var column in this.Template.Columns)
                            {
                                var footerCellData = new RATableViewFooterData<TItem>()
                                {
                                    Column = column,
                                    Segments = segments,
                                    AllItems = segments.AllItems(),
                                };

                                <td class="@GetFooterCellClass(footerCellData)">
                                    @if (column.GetFooterCellContent != null)
                                    {
                                        @column.GetFooterCellContent(footerCellData)
                                    }
                                    else if (column.GetFooterCellValue != null)
                                    {
                                        column.EnsureDisplayValueOptions();

                                        @column.GetDisplayValue(
                                            column.GetFooterCellValue(footerCellData), 
                                            this.TimeConverter)
                                    }
                                </td>
                            }
                        </tr>
                    </tfoot>
                }
            </table>
        </div>
    }
    else if (this.NoItemsMessage.HasText())
    {
        <div class="@this.Class" style="@this.Style">
            @this.NoItemsMessage
        </div>
    }
}

@code {

    private TItem? _selectedRowEntity;

    [Parameter]
    public RATableTemplate<TItem>? Template { get; set; }

    [Parameter]
    public string? NoItemsMessage { get; set; }

    [Parameter]
    public List<RATableViewSegment<TItem>>? Segments { get; set; }

    [Parameter]
    public ICollection<TItem>? Items { get; set; }

    // [Parameter]
    // public bool IsScrollableHorizontally { get; set; } = true;

    [Parameter]
    public bool IsScrollableVertically { get; set; } = true;

    [Parameter]
    public int? FixedHeight { get; set; }

    [Parameter]
    public int DebugContentCount { get; set; } = 1;

    [Parameter]
    public bool StripeRows { get; set; } = true;

    [Parameter]
    public bool ShowSelectedRow { get; set; } = false;

    [Parameter]
    public RATableViewSegmentStyle SegmentStyle { get; set; } = RATableViewSegmentStyle.Header;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    private string GetTableWrapperClass()
    {
        var classes = "ra-scrollable-x ";

        if (this.IsScrollableVertically && !this.FixedHeight.HasValue)
        {
            classes += "ra-scrollable-y ra-flex-nostretch ";
        }

        return classes.Trim();
    }

    private string GetTableClass(
        RATableTemplate<TItem> template)
    {
        var classes = "ra-tableview ";

        if (this.StripeRows)
        {
            classes += "ra-tableview-striped ";
        }

        if (template.OnRowSelected != null)
        {
            classes += "ra-tableview-selectable ";
        }

        // if (this.IsScrollableHorizontally)
        // {
        //     classes += "ra-scrollable-x ";
        // }

        if (this.FixedHeight.HasValue)
        {
            classes += "ra-scrollable-y ";
        }

        return classes.Trim();
    }

    private string GetTableStyle()
    {
        var style = String.Empty;

        if (this.FixedHeight.HasValue)
        {
            style += $"height: {this.FixedHeight.Value}px; display: inline-block; ";
        }

        return style.Trim();
    }

    private string GetHeaderCellClass(
        RATableTemplate<TItem>.Column<TItem> column)
    {
        string classes = GetCellHorizontalAlignmentClass(
            column.HeaderCellHorizontalAlignment) + " ";

        if (this.Template != null &&
            column.CanBeSorted(this.Template.IsSortableOverride))
        {
            classes += "ra-clickable ";
        }

        return classes.Trim();
    }

    private string GetHeaderCellStyle(
        RATableTemplate<TItem>.Column<TItem> column)
    {
        string style = String.Empty;

        if (column.FixedWidth.HasValue)
        {
            style += $"width: {column.FixedWidth.Value}px";
        }

        return style.Trim();
    }

    private bool IsRowSelected(
        TItem item)
    {
        return item != null &&
            _selectedRowEntity != null &&
            _selectedRowEntity.Equals(item);
    }

    private string GetRowClass(
        TItem item)
    {
        string classes = (this.Segments?.Count > 1 && this.SegmentStyle == RATableViewSegmentStyle.Header) ?
            "ra-tableview-indented-row" :
            String.Empty;

        if (this.Template != null &&
            this.Template.OnRowSelected != null &&
            this.ShowSelectedRow &&
            IsRowSelected(item))
        {
            classes += "ra-tableview-selected-row ";
        }

        return classes.Trim();
    }

    private string GetCellClass(
        RATableTemplate<TItem>.Column<TItem> column,
        RATableViewSegment<TItem> segment,
        TItem item)
    {
        string classes = 
            column.CellClass + " " + 
            GetCellHorizontalAlignmentClass(column.CellHorizontalAlignment) + " ";

        if (column.GetCellClass != null)
        {
            classes += column.GetCellClass(column, segment, item) + " ";
        }

        return classes.Trim();
    }

    private string GetFooterCellClass(
        RATableViewFooterData<TItem> footerData)
    {
        string classes = 
            GetCellHorizontalAlignmentClass(
                footerData.Column?.FooterCellHorizontalAlignment ?? 
                footerData.Column?.CellHorizontalAlignment) + 
            " ";

        if (footerData.Column?.GetFooterCellClass != null)
        {
            classes += footerData.Column.GetFooterCellClass(footerData) + " ";
        }

        return classes.Trim();
    }

    private string GetCellHorizontalAlignmentClass(
        RATableViewCellHorizontalAlignment? cellHorizontalAlignment)
    {
        if (cellHorizontalAlignment.HasValue)
        {
            switch (cellHorizontalAlignment)
            {
                case RATableViewCellHorizontalAlignment.Center:
                    return "text-center";

                case RATableViewCellHorizontalAlignment.Right:
                    return "text-end";
            }
        }

        return "text-start";
    }

    private string GetCellStyle(
        RATableTemplate<TItem>.Column<TItem> column,
        RATableViewSegment<TItem> segment,
        TItem item)
    {
        string style = String.Empty;

        if (column.GetCellStyle != null)
        {
            style += column.GetCellStyle(column, segment, item) + " ";
        }

        return style.Trim();
    }

    private void HandleOnSortBy(
        RATableTemplate<TItem>.Column<TItem> column)
    {
        if (column.SortBy)
        {
            column.SortDescending = !column.SortDescending;
        }
        else if (this.Template != null)
        {
            this.Template.SetSortByColumn(column, false);
        }
    }

    private List<RATableViewSegment<TItem>> GetSegments()
    {
        if (this.Segments != null)
        {
            return this.Segments;
        }
        else
        {
            return new([new("Default", this.Items ?? [])]);
        }
    }

    private bool HasItems(
        List<RATableViewSegment<TItem>> segments)
    {
        return segments != null &&
            segments.Count > 0 &&
            segments.Any(x => x.HasItems);
    }

    private void HandleOnRowSelected(
        RATableViewSegment<TItem> segment,
        TItem item)
    {
        if (this.ShowSelectedRow)
        {
            _selectedRowEntity = item;
        }

        this.Template?.OnRowSelected?.Invoke(segment, item);
    }
}
