@typeparam TInput where TInput : class

@if (this.Input != null && _validationState != null)
{
    <EditForm EditContext="@_editContext"
              OnSubmit="@SubmitAsync"
              FormName="@this.FormName"
              class="@this.Class">

        @if (this.ShowValidationSummary && !_validationState.IsValid)
        {
            <div role="alert" class="alert alert-danger">

                <div class="fw-bold">@this.InvalidInputMessage</div>

                @if (_validationState.GeneralErrors.Count > 0)
                {
                    <ul>
                        @foreach (var error in _validationState.GeneralErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                }

            </div>
        }

        <CascadingValue Value="this.Input"
                        IsFixed="true"
                        Name="@RAFormValidationState.CASCADING_PARAMETER_RAFormInput">

            @this.ChildContent

        </CascadingValue>

        <SectionOutlet SectionName="@CONTROLS_SECTION_NAME" />

    </EditForm>
}

@code {

    public const string DEFAULT_INVALID_INPUT_MSG = "WHOOPS! Please see issue(s) below.";
    public const string CONTROLS_SECTION_NAME = "RAForm-Controls";

    private EditContext? _editContext;
    private RAFormValidationState? _validationState;

    public bool IsProcessing { get; private set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public TInput? Input { get; set; }

    [Parameter]
    public bool ValidateInput { get; set; } = true;

    [Parameter]
    public bool ShowValidationSummary { get; set; } = true;

    [Parameter]
    public string InvalidInputMessage { get; set; } = DEFAULT_INVALID_INPUT_MSG;

    [Parameter]
    public Func<TInput, RAFormValidationState, Task>? OnValidateInputBeforeSubmit { get; set; }

    [Parameter]
    public Func<Task>? OnBeforeSubmit { get; set; }

    [Parameter]
    public Func<Task<object>>? OnSubmit { get; set; }

    [Parameter]
    public Func<RAFormSubmissionResult, Task>? OnAfterSubmit { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? FormName { get; set; }

    protected override void OnParametersSet()
    {
        if (this.Input != null)
        {
            _editContext = _editContext ?? new EditContext(this.Input);
            _validationState = _validationState ?? new RAFormValidationState(_editContext);
        }

        this.FormName = this.FormName ?? Guid.NewGuid().ToShortString();
    }

    public async Task<RAFormSubmissionResult> SubmitAsync()
    {
        // Validate state.
        if (_validationState == null || this.Input == null)
        {
            throw new InvalidOperationException("Form has no input / validation state");
        }
        else if (this.OnSubmit == null)
        {
            throw new InvalidOperationException("Form has no submit handler");
        }

        // Form the result.
        var result = new RAFormSubmissionResult()
        {
            ValidationState = _validationState,
        };

        try
        {
            // Record processing.
            this.IsProcessing = true;

            // Handle before submit.
            if (this.OnBeforeSubmit != null)
            {
                await this.OnBeforeSubmit();
            }

            // Validate.
            if (this.ValidateInput)
            {
                _validationState.Validate(this.Input);
            }

            // Handle before form submission; this may had additional validation errors.
            if (this.OnValidateInputBeforeSubmit != null)
            {
                await OnValidateInputBeforeSubmit(
                    this.Input,
                    _validationState);
            }

            // Submit the form.
            if (_validationState.IsValid)
            {
                result.ReturnedResult = await this.OnSubmit();
                result.Succeeded = true;
            }
        }
        catch (PropertyException propertyEx)
        {
            _validationState.AddPropertyError(
                propertyEx.PropertyName, 
                propertyEx.Message);
        }
        catch (Exception ex)
        {
            _validationState.AddGeneralError(ex.Message);
        }

        // Handle after submit.
        if (this.OnAfterSubmit != null)
        {
            // TODO: Should we handle exceptions here?
            await this.OnAfterSubmit(result);
        }

        // No longer processing.
        this.IsProcessing = false;

        return result;
    }
}
