@inject TimeConverter TimeConverter
@implements IDisposable

@if (this.Value.HasValue)
{
    @if (!this.DateTimeFormat.HasText())
    {
        @GetDateTime(this.Value.Value).ToDefaultDateTimeString()
    }
    else
    {
        @GetDateTime(this.Value.Value).ToString(this.DateTimeFormat)
    }
}
else
{
    @this.DefaultValue
}

@code {

    [Parameter]
    public DateTime? Value { get; set; }

    [Parameter]
    public string? DefaultValue { get; set; } = "-";

    [Parameter]
    public string? DateTimeFormat { get; set; }

    [Parameter]
    public string? TimeZoneId { get; set; }

    protected override void OnInitialized()
    {
        this.TimeConverter.LocalTimeZoneChanged += LocalTimeZoneChanged;
    }

    public void Dispose()
    {
        this.TimeConverter.LocalTimeZoneChanged -= LocalTimeZoneChanged;
    }

    private void LocalTimeZoneChanged(
        object? sender, 
        System.EventArgs e)
    {
        _ = InvokeAsync(StateHasChanged);
    }

    private DateTime GetDateTime(
        DateTime value)
    {
        if (this.TimeZoneId.HasText())
        {
            return this.TimeConverter.ToDateTime(value, this.TimeZoneId);
        }
        else
        {
            return this.TimeConverter.ToLocalDateTime(value);
        }
    }
}
